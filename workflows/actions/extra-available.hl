
/*
 * Returns true if the specified extra field is available.
 *
 * Optionally apply [throw] as true, at which point the action will throw an exception if
 * the extra field is already taken with the specified value. This action allows us to ensure
 * we have unique values for extra fields.
 */
.arguments
   type
      type:string
      mandatory:bool:true
   value
      type:string
      mandatory:bool:true
   throw
      type:bool
      mandatory:bool:false
.icon:supervisor_account

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/value

// Applying defaults.
validators.default:x:@.arguments
   throw:bool:false

// Opens up database connection.
data.connect:[generic|magic]

   // Selecting users_extra from database such that we can check if it exists or not.
   data.read
      table:users_extra
      columns
         user
      where
         and
            type.eq:x:@.arguments/*/type
            value.eq:x:@.arguments/*/value

   // Checks if above invocation returned anything.
   if
      exists:x:@data.read/*
      .lambda

         // Checking if we should throw an exception instead of returning false.
         if:x:@.arguments/*/throw
            strings.concat
               get-value:x:@.arguments/*/type
               .:" has already been taken"
            throw:x:@strings.concat
               status:int:400
               public:bool:true

         // Extra field exists, returning false to caller.
         return
            available:bool:false

   else

      // Extra field does not exist, returning true to caller.
      return
         available:bool:true
